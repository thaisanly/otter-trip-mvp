// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TourLeader {
  id            String   @id @default(cuid())
  name          String
  image         String
  coverImage    String?  // Cover image for profile page
  location      String
  rating        Float
  reviewCount   Int
  specialty     String
  description   String
  price         String
  isSuperhost   Boolean  @default(false)
  languages     Json     // Array of languages
  experience    String?
  certifications Json?   // Array of certifications
  bio           String?
  expertise     Json?    // Array of expertise areas
  travelStyle   Json?    // Array of travel style preferences
  travelStories Json?    // Array of travel story objects
  curatedTours  Json?    // Array of curated tour IDs
  upcomingTours Json?    // Array of upcoming tour IDs
  countrySpecializations Json? // Array of country specialization objects
  tourCompleteCount Int?  // Number of completed tours
  averageResponseTime String? // Average response time
  tours         Tour[]   // Relation to tours
  reviews       Json?    // Array of review objects
  availability  Json?    // Availability data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("tour_leaders")
}

model Tour {
  id            String      @id @default(cuid())
  code          String      @unique
  title         String
  heroImage     String
  duration      String
  price         String
  totalJoined   Int         @default(0)
  rating        Float       @default(0)
  reviewCount   Int         @default(0)
  location      String
  categories    Json        // Array of category strings
  overview      Json        // Array of overview paragraphs
  highlights    Json        // Array of highlight strings
  contentImage  String?
  videoUrl      String?
  galleryImages Json?       // Array of image URLs
  inclusions    Json?       // Array of inclusion strings
  exclusions    Json?       // Array of exclusion strings
  itinerary     Json?       // Array of itinerary objects
  additionalInfo Json?      // Array of additional info objects
  guide         Json?       // Guide object with details (deprecated - use tourLeader relation)
  dates         Json?       // Array of available dates
  reviews       Json?       // Array of review objects
  description   String?
  groupSize     Int?
  spotsLeft     Int?
  tourLeaderId  String?     // Foreign key to TourLeader
  tourLeader    TourLeader? @relation(fields: [tourLeaderId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("tours")
}

model Expert {
  id            String   @id @default(cuid())
  name          String
  title         String
  image         String
  banner        String?  // Banner/cover image URL
  location      String
  rating        Float
  reviewCount   Int
  hourlyRate    String
  languages     Json     // Array of languages
  expertise     Json     // Array of expertise areas
  certifications Json?   // Array of certifications
  availability  Json?    // Availability data
  bio           String?
  experience    String?
  featuredTours Json?    // Array of featured tour IDs
  socialMedia   Json?    // Social media links object
  latestVideos  Json?    // Array of video objects {id, title, url, thumbnail, viewCount}
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("experts")
}

model Booking {
  id                String   @id @default(cuid())
  bookingReference  String   @unique
  tourId            String
  tourTitle         String
  location          String?
  selectedDate      String
  participants      Int
  pricePerPerson    Float
  totalPrice        Float
  leadTraveler      Json     // Object with firstName, lastName, email, phone
  additionalTravelers Json?  // Array of traveler objects
  specialRequests   String?
  status            String   @default("pending")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("bookings")
}

model ConsultationBooking {
  id              String   @id @default(cuid())
  expertId        String
  expertName      String
  name            String
  email           String
  phone           String?
  company         String?
  preferredDate   String?
  preferredTime   String?
  message         String?
  invitationCode  String?
  status          String   @default("pending")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("consultation_bookings")
}

model ConsultationCode {
  id          String    @id @default(cuid())
  code        String    @unique
  status      String    @default("active") // active | inactive | expired
  description String?   // Optional description for the code
  maxUses     Int?      // Maximum number of times this code can be used (null = unlimited)
  usedCount   Int       @default(0) // Number of times this code has been used
  expiresAt   DateTime? // Optional expiration date
  createdBy   String?   // Who created this code
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("consultation_codes")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // Hashed password
  name      String
  role      String   @default("admin") // admin | super_admin
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Inquiry {
  id            String   @id @default(cuid())
  name          String
  email         String
  phone         String?
  destination   String
  preferredDate String?
  tripDuration  String?
  message       String?
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("inquiries")
}

model TourCategory {
  id          String   @id // Slug as primary key (e.g., "adventure", "cultural")
  name        String   // Display name (e.g., "Adventure Tours")
  description String   // Detailed description
  coverImage  String   // Cover image URL
  icon        String?  // Optional icon name or URL
  interests   Json?    // Array of interest tags
  isActive    Boolean  @default(true)
  displayOrder Int     @default(0) // For sorting categories
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tour_categories")
}

model Newsletter {
  id               String    @id @default(cuid())
  email            String    @unique
  confirmationToken String?  @unique
  isConfirmed      Boolean   @default(false)
  confirmedAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([email])
  @@index([confirmationToken])
  @@map("newsletters")
}